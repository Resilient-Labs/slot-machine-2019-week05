# Ricamura's Memory Matcher

**link to site** https://ricamuramemorymatcher.netlify.app/

![my site](/Users/resilientcoders/Desktop/rc/potfolio/slot-machine-2019-week05/slots/pics/slotmachine.png)

### How Itâ€™s Made

<b>Langs used</b> CSS3 HTML5 and Javasctipt

So first, I had to settle what the HTML was going to be. I needed to know how many buttons I would need, how many tags I would need, the sections, etc. I came to the conclusion that I would need four buttons; place min bet, place max bet, start the spins and to reset the bets. The logic was this- I wanted to have the buttons be pressed first before the slot began spinniing, or the randomizer was initiated. I made three sections to be the slot columns or reels of the slot machine. And again, I put an empty tag in th emiddle of the slot fo0 show the players status, that being win or lose. Along with that, I created an empty tag to correlate to the bets. 
Once I finished the css, I focused heaviuly on the Javascript. I knew that I was going to use Math.random() and that conditionals would be heavily used. After declaring my variables and adding my event listeners, I went to work. 

### optimizations

Any that you can think of or that you can see would be greatly appreciated. 

### Lessons Learned

I got really comfortable with using Math.random() and creating a for loop. This project really helped familarize me witih the concept of scope in programming and to be very careful with function creation and variable declaration, as doing it in the wrong place can lean towards a lot of reference errors. 
What I noticed, about my way of programming, is that I do not like to code out of order, which I hve no idea as to how efficient that can be. There is something in me that is not able to go forward until the current task is finished. I know not to waste time and to move on, and come back, however, because, in my mind, what comes before in programming dictates what is going to come after, sometimes I get bogged down on how to make this one particular function work, instead of just moving forward and writing down. 
If you're reading this, please feel free to send me your musings on programming efficiency when it comes to the order of functions you program. 
also.... spelling... spelling..spelling..